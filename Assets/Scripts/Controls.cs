//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Dungeon"",
            ""id"": ""3aa3f95c-8cf9-4c35-8d32-123f74715c09"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fa3a9f94-67f5-4e6b-8ce1-493776a2c9bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""131057f7-8bb1-4bcd-b926-f3197807890a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ee1e73c7-1c29-478b-8dac-daf443c5f666"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c08cd6c9-a61d-486f-a9df-76c504a214d4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e61eaa2-5b8d-4559-b81d-3e58a384d736"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d23eabfc-a907-4f7a-8bff-28448265c367"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e5805be3-1e98-4c5b-8733-7f9350e15a72"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d41e3958-d733-4ddc-8f55-352aa63063cc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a2525c9-4661-42f8-a35a-cb89603a40e0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14fad19e-562a-4946-8126-429ebb864500"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""96b92867-4e1a-420f-acc7-7b8a9f158a0e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53aafbcd-af6a-4358-86e7-2a74b07b9163"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81f41c07-46ac-4a90-9980-66de19174b9a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1e95a64-5ef1-428d-ac59-be1273fd616b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c482ab1-13ea-422e-a8ab-540e8bdf4fa9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Table"",
            ""id"": ""26c79903-9ad1-4802-91e9-8330e45b5216"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""dc223c36-c896-46ef-ab49-2e3cc4f207e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Zone"",
                    ""type"": ""Button"",
                    ""id"": ""f3f93815-c286-4f5f-ac12-a9faeadfda2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""e6dcb8bd-95ae-4c92-8884-3eb4b49a31e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollDice"",
                    ""type"": ""Button"",
                    ""id"": ""013b6aba-7ce5-4c7f-bd9b-6f01d0107292"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae851081-efca-4474-9334-31427cce6c62"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b07fb83-07ee-4d4e-991e-c52481bebf36"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Zone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d40aef7-8925-4adb-ac31-a59b6f7b2514"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cebbe0e3-498c-4084-9c27-77d894283118"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollDice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DEBUG"",
            ""id"": ""d4fd31ec-e59d-4428-9cb9-0cfedfa2f110"",
            ""actions"": [
                {
                    ""name"": ""ToggleView"",
                    ""type"": ""Button"",
                    ""id"": ""fb0fb696-afce-4262-937d-b68333b3ac57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e928615-4890-418e-8c7b-2d0f45b0fb43"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dungeon
        m_Dungeon = asset.FindActionMap("Dungeon", throwIfNotFound: true);
        m_Dungeon_Movement = m_Dungeon.FindAction("Movement", throwIfNotFound: true);
        m_Dungeon_Accept = m_Dungeon.FindAction("Accept", throwIfNotFound: true);
        // Table
        m_Table = asset.FindActionMap("Table", throwIfNotFound: true);
        m_Table_Mouse = m_Table.FindAction("Mouse", throwIfNotFound: true);
        m_Table_RotateZone = m_Table.FindAction("Rotate Zone", throwIfNotFound: true);
        m_Table_Accept = m_Table.FindAction("Accept", throwIfNotFound: true);
        m_Table_RollDice = m_Table.FindAction("RollDice", throwIfNotFound: true);
        // DEBUG
        m_DEBUG = asset.FindActionMap("DEBUG", throwIfNotFound: true);
        m_DEBUG_ToggleView = m_DEBUG.FindAction("ToggleView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dungeon
    private readonly InputActionMap m_Dungeon;
    private IDungeonActions m_DungeonActionsCallbackInterface;
    private readonly InputAction m_Dungeon_Movement;
    private readonly InputAction m_Dungeon_Accept;
    public struct DungeonActions
    {
        private @Controls m_Wrapper;
        public DungeonActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Dungeon_Movement;
        public InputAction @Accept => m_Wrapper.m_Dungeon_Accept;
        public InputActionMap Get() { return m_Wrapper.m_Dungeon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DungeonActions set) { return set.Get(); }
        public void SetCallbacks(IDungeonActions instance)
        {
            if (m_Wrapper.m_DungeonActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnMovement;
                @Accept.started -= m_Wrapper.m_DungeonActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_DungeonActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_DungeonActionsCallbackInterface.OnAccept;
            }
            m_Wrapper.m_DungeonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
            }
        }
    }
    public DungeonActions @Dungeon => new DungeonActions(this);

    // Table
    private readonly InputActionMap m_Table;
    private ITableActions m_TableActionsCallbackInterface;
    private readonly InputAction m_Table_Mouse;
    private readonly InputAction m_Table_RotateZone;
    private readonly InputAction m_Table_Accept;
    private readonly InputAction m_Table_RollDice;
    public struct TableActions
    {
        private @Controls m_Wrapper;
        public TableActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_Table_Mouse;
        public InputAction @RotateZone => m_Wrapper.m_Table_RotateZone;
        public InputAction @Accept => m_Wrapper.m_Table_Accept;
        public InputAction @RollDice => m_Wrapper.m_Table_RollDice;
        public InputActionMap Get() { return m_Wrapper.m_Table; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TableActions set) { return set.Get(); }
        public void SetCallbacks(ITableActions instance)
        {
            if (m_Wrapper.m_TableActionsCallbackInterface != null)
            {
                @Mouse.started -= m_Wrapper.m_TableActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_TableActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_TableActionsCallbackInterface.OnMouse;
                @RotateZone.started -= m_Wrapper.m_TableActionsCallbackInterface.OnRotateZone;
                @RotateZone.performed -= m_Wrapper.m_TableActionsCallbackInterface.OnRotateZone;
                @RotateZone.canceled -= m_Wrapper.m_TableActionsCallbackInterface.OnRotateZone;
                @Accept.started -= m_Wrapper.m_TableActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_TableActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_TableActionsCallbackInterface.OnAccept;
                @RollDice.started -= m_Wrapper.m_TableActionsCallbackInterface.OnRollDice;
                @RollDice.performed -= m_Wrapper.m_TableActionsCallbackInterface.OnRollDice;
                @RollDice.canceled -= m_Wrapper.m_TableActionsCallbackInterface.OnRollDice;
            }
            m_Wrapper.m_TableActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @RotateZone.started += instance.OnRotateZone;
                @RotateZone.performed += instance.OnRotateZone;
                @RotateZone.canceled += instance.OnRotateZone;
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
                @RollDice.started += instance.OnRollDice;
                @RollDice.performed += instance.OnRollDice;
                @RollDice.canceled += instance.OnRollDice;
            }
        }
    }
    public TableActions @Table => new TableActions(this);

    // DEBUG
    private readonly InputActionMap m_DEBUG;
    private IDEBUGActions m_DEBUGActionsCallbackInterface;
    private readonly InputAction m_DEBUG_ToggleView;
    public struct DEBUGActions
    {
        private @Controls m_Wrapper;
        public DEBUGActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleView => m_Wrapper.m_DEBUG_ToggleView;
        public InputActionMap Get() { return m_Wrapper.m_DEBUG; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DEBUGActions set) { return set.Get(); }
        public void SetCallbacks(IDEBUGActions instance)
        {
            if (m_Wrapper.m_DEBUGActionsCallbackInterface != null)
            {
                @ToggleView.started -= m_Wrapper.m_DEBUGActionsCallbackInterface.OnToggleView;
                @ToggleView.performed -= m_Wrapper.m_DEBUGActionsCallbackInterface.OnToggleView;
                @ToggleView.canceled -= m_Wrapper.m_DEBUGActionsCallbackInterface.OnToggleView;
            }
            m_Wrapper.m_DEBUGActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleView.started += instance.OnToggleView;
                @ToggleView.performed += instance.OnToggleView;
                @ToggleView.canceled += instance.OnToggleView;
            }
        }
    }
    public DEBUGActions @DEBUG => new DEBUGActions(this);
    public interface IDungeonActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
    }
    public interface ITableActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnRotateZone(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
        void OnRollDice(InputAction.CallbackContext context);
    }
    public interface IDEBUGActions
    {
        void OnToggleView(InputAction.CallbackContext context);
    }
}
